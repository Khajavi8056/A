//+------------------------------------------------------------------+
//|                                               ExpertTester.mq5 |
//|               اکسپرت تستر برای کتابخانه SimpleFibonacciEngine     |
//|               https://github.com/Khajavi8056                   |
//+------------------------------------------------------------------+
#property copyright "Mohammad Khajavi"
#property link      "https://github.com/Khajavi8056"
#property version   "1.00"

//--- کتابخانه موتور فیبوناچی رو به پروژه اضافه می‌کنیم
#include <FibonacciEngine.mqh>

//--- ساخت یک نمونه (instance) از کلاس موتور فیبوناچی
CSimpleFibonacciEngine FiboEngine;

//+------------------------------------------------------------------+
//| تابع مقداردهی اولیه اکسپرت                                      |
//+------------------------------------------------------------------+
int OnInit()
{
   //--- پیام شروع به کار در تب Experts
   Print("اکسپرت تستر برای کتابخانه فیبوناچی شروع به کار کرد.");
   Print("در حال آماده‌سازی موتور تحلیل...");

   //--- موتور تحلیل را مقداردهی اولیه می‌کنیم
   if(!FiboEngine.Init())
   {
      Print("خطا: موتور تحلیل فیبوناچی نتوانست راه‌اندازی شود. لطفاً تنظیمات و وجود اندیکاتور Fineflow را بررسی کنید.");
      return(INIT_FAILED); // در صورت خطا، کار اکسپرت متوقف می‌شود
   }

   Print("موتور تحلیل با موفقیت راه‌اندازی شد. اکسپرت آماده است.");
   //---
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| تابع پایان کار اکسپرت                                          |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   //--- پیام پایان کار
   Print("اکسپرت تستر متوقف شد.");
   // پاکسازی اشیاء گرافیکی توسط خودِ کلاس در زمان نابودی (destructor) انجام می‌شود
}

//+------------------------------------------------------------------+
//| تابع اصلی که با هر تیک قیمت اجرا می‌شود                          |
//+------------------------------------------------------------------+
void OnTick()
{
   //--- 1. به موتور دستور می‌دهیم تا به دنبال ساختار جدید و شکست آن بگردد
   // این تابع خودش هوشمند است و فقط روی کندل جدید کارش را انجام می‌دهد
   FiboEngine.ScoutForStructure();

   //--- 2. وضعیت فعلی موتور را بررسی می‌کنیم
   ENUM_FIBO_STATUS currentStatus = FiboEngine.GetFiboStatus();

   //--- اگر موتور در حالت "انتظار برای ساختار جدید" بود، یعنی یک شکست (BOS) رخ داده
   // و حالا باید به او دستور تحلیل و رسم فیبوناچی را بدهیم.
   if(currentStatus == STATUS_WAITING)
   {
      // تلاش می‌کنیم تحلیل خرید را فعال کنیم.
      // اگر ساختار بازار صعودی باشد، کتابخانه آن را قبول می‌کند.
      if(FiboEngine.AnalyzeAndDrawFibo(true))
      {
         Print("دستور تحلیل صعودی (Buy) صادر شد. فیبوناچی موقت رسم می‌شود.");
      }
      // در غیر این صورت، تلاش می‌کنیم تحلیل فروش را فعال کنیم.
      // اگر ساختار بازار نزولی باشد، کتابخانه این یکی را قبول می‌کند.
      else if(FiboEngine.AnalyzeAndDrawFibo(false))
      {
         Print("دستور تحلیل نزولی (Sell) صادر شد. فیبوناچی موقت رسم می‌شود.");
      }
   }
   
   //--- 3. به موتور دستور می‌دهیم شرایط فیبوناچی فعال را نگهبانی کند
   // این تابع چک می‌کند که آیا قیمت وارد ناحیه ورود شده یا تحلیل فیل شده است.
   // همچنین فیبوناچی را در صورت رسیدن به تارگت‌ها آپدیت می‌کند.
   FiboEngine.CheckConditions();
}
//+------------------------------------------------------------------+
